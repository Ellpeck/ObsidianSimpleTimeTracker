/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => SimpleTimeTrackerPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings.ts
var defaultSettings = {};

// src/settings-tab.ts
var import_obsidian = __toModule(require("obsidian"));
var SimpleTimeTrackerSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h2", { text: "Simple Time Tracker Settings" });
    this.containerEl.createEl("hr");
    this.containerEl.createEl("p", { text: "If you like this plugin and want to support its development, you can do so through my website by clicking this fancy image!" });
    this.containerEl.createEl("a", { href: "https://ellpeck.de/support" }).createEl("img", { attr: { src: "https://ellpeck.de/res/generalsupport.png" }, cls: "simple-time-tracker-support" });
  }
};

// src/tracker.ts
var import_obsidian2 = __toModule(require("obsidian"));
function startEntry(tracker, name) {
  if (!name)
    name = `Segment ${tracker.entries.length + 1}`;
  let entry = { name, startTime: (0, import_obsidian2.moment)().unix(), endTime: null };
  tracker.entries.push(entry);
}
function endEntry(tracker) {
  let last = tracker.entries.last();
  last.endTime = (0, import_obsidian2.moment)().unix();
}
function isRunning(tracker) {
  let last = tracker.entries.last();
  return last != null && !last.endTime;
}
function saveTracker(tracker, app, section) {
  return __async(this, null, function* () {
    let file = app.workspace.getActiveFile();
    let content = yield app.vault.cachedRead(file);
    let lines = content.split("\n");
    let prev = lines.filter((_, i) => i <= section.lineStart).join("\n");
    let next = lines.filter((_, i) => i >= section.lineEnd).join("\n");
    content = `${prev}
${JSON.stringify(tracker)}
${next}`;
    yield app.vault.modify(file, content);
  });
}
function loadTracker(json) {
  if (json) {
    try {
      return JSON.parse(json);
    } catch (e) {
      console.log(`Failed to parse Tracker from ${json}`);
    }
  }
  return { entries: [] };
}
function displayTracker(tracker, element, getSectionInfo) {
  let running = isRunning(tracker);
  let btn = new import_obsidian2.ButtonComponent(element).setButtonText(running ? "End" : "Start").onClick(() => __async(this, null, function* () {
    if (running) {
      endEntry(tracker);
    } else {
      startEntry(tracker, name.getValue());
    }
    yield saveTracker(tracker, this.app, getSectionInfo());
  }));
  btn.buttonEl.addClass("simple-time-tracker-btn");
  let name = new import_obsidian2.TextComponent(element).setPlaceholder("Segment name").setDisabled(running);
  name.inputEl.addClass("simple-time-tracker-txt");
  let timer = element.createDiv({ cls: "simple-time-tracker-timers" });
  let currentDiv = timer.createEl("div", { cls: "simple-time-tracker-timer" });
  let current = currentDiv.createEl("span", { cls: "simple-time-tracker-timer-time" });
  currentDiv.createEl("span", { text: "Current" });
  let totalDiv = timer.createEl("div", { cls: "simple-time-tracker-timer" });
  let total = totalDiv.createEl("span", { cls: "simple-time-tracker-timer-time" });
  totalDiv.createEl("span", { text: "Total" });
  let table = element.createEl("table", { cls: "simple-time-tracker-table" });
  table.createEl("tr").append(createEl("th", { text: "Segment" }), createEl("th", { text: "Start time" }), createEl("th", { text: "End time" }), createEl("th", { text: "Total" }));
  for (let entry of tracker.entries) {
    let row = table.createEl("tr");
    row.createEl("td", { text: entry.name });
    row.createEl("td", { text: import_obsidian2.moment.unix(entry.startTime).format("YY-MM-DD hh:mm:ss") });
    if (entry.endTime) {
      row.createEl("td", { text: import_obsidian2.moment.unix(entry.endTime).format("YY-MM-DD hh:mm:ss") });
      let duration = import_obsidian2.moment.unix(entry.endTime).diff(import_obsidian2.moment.unix(entry.startTime));
      row.createEl("td", { text: getCountdownDisplay(import_obsidian2.moment.duration(duration)) });
    }
  }
  setCountdownValues(tracker, current, total, currentDiv);
  let intervalId = window.setInterval(() => {
    if (!element.isConnected) {
      window.clearInterval(intervalId);
      return;
    }
    setCountdownValues(tracker, current, total, currentDiv);
  }, 1e3);
}
function getCountdownDisplay(duration) {
  let ret = "";
  if (duration.hours() > 0)
    ret += duration.hours() + "h ";
  if (duration.minutes() > 0)
    ret += duration.minutes() + "m ";
  ret += duration.seconds() + "s";
  return ret;
}
function setCountdownValues(tracker, current, total, currentDiv) {
  let currEntry = tracker.entries.last();
  if (currEntry) {
    let currDuration = (0, import_obsidian2.moment)().diff(import_obsidian2.moment.unix(currEntry.startTime));
    if (!currEntry.endTime)
      current.setText(getCountdownDisplay(import_obsidian2.moment.duration(currDuration)));
    let totalDuration = 0;
    for (let entry of tracker.entries) {
      if (entry == currEntry && !currEntry.endTime) {
        totalDuration += currDuration;
      } else {
        totalDuration += import_obsidian2.moment.unix(entry.endTime).diff(import_obsidian2.moment.unix(entry.startTime));
      }
    }
    total.setText(getCountdownDisplay(import_obsidian2.moment.duration(totalDuration)));
  }
  currentDiv.hidden = !currEntry || !!currEntry.endTime;
}

// src/main.ts
var SimpleTimeTrackerPlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SimpleTimeTrackerSettingsTab(this.app, this));
      this.registerMarkdownCodeBlockProcessor("simple-time-tracker", (s, e, i) => {
        let tracker = loadTracker(s);
        e.empty();
        displayTracker(tracker, e, () => i.getSectionInfo(e));
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, defaultSettings, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
